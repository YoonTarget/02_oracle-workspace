-- KH_연습문제

-- 1. 70년대 생(1970~1979) 중 여자이면서 전 씨인 사원의 이름과 주민번호, 부서명, 직급 조회
SELECT * FROM EMPLOYEE; --      DEPT_CODE                       JOB_CODE
SELECT * FROM DEPARTMENT; --    DEPT_ID         DEPT_TITLE          
SELECT * FROM JOB; --                                           JOB_CODE    JOB_NAME

SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME 
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE SUBSTR(EMP_NO, 1, 2) BETWEEN '70' AND '79'
AND SUBSTR(EMP_NO, 8, 1) IN (2, 4)
AND EMP_NAME LIKE '전%';

-- 2. 나이 상 가장 막내의 사원 코드, 사원 명, 나이, 부서 명, 직급 명 조회
SELECT EMP_ID, EMP_NAME, 2023 - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6))) + 1 AS "나이", DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
ORDER BY EMP_NO DESC;

SELECT *
FROM (SELECT EMP_ID, EMP_NAME, 2023 - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6))) + 1 AS "나이", DEPT_TITLE, JOB_NAME
        FROM EMPLOYEE
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
        JOIN JOB USING (JOB_CODE)
        ORDER BY EMP_NO DESC)
WHERE ROWNUM <= 1;

-- 3. 이름에 '형'이 들어가는 사원의 사원 코드, 사원명, 직급 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME LIKE '%형%';

-- 4. 부서코드가 D5이거나 D6인 사원의 사원 명, 직급 명, 부서 코드, 부서 명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN JOB USING (JOB_CODE)
WHERE DEPT_CODE IN ('D5', 'D6');

-- 5. 보너스를 받는 사원의 사원 명, 부서 명, 지역 명 조회
SELECT * FROM LOCATION; --      NATIONAL_CODE       LOCAL_CODE
SELECT * FROM DEPARTMENT; --                        LOCATION_ID

SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

-- 6. 사원명, 직급명, 부서명, 지역명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- 7. 한국이나 일본에서 근무 중인 사원의 사원 명, 부서 명, 지역 명, 국가 명 조회
SELECT * FROM NATIONAL;

SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL USING (NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국', '일본');

-- 8. 한 사원과 같은 부서에서 일하는 사원의 이름 조회
SELECT * FROM EMPLOYEE;

SELECT D.EMP_NAME, DEPT_CODE, E.EMP_NAME
FROM EMPLOYEE E
JOIN EMPLOYEE D USING (DEPT_CODE)
WHERE E.EMP_NAME != D.EMP_NAME
ORDER BY D.EMP_NAME;

-- 9. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 이름, 직급명, 급여 조회 (NVL 이용)
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
WHERE NVL(BONUS, 0) = 0
AND JOB_CODE IN ('J4', 'J7');

-- 10. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서명, 직급, 입사일, 순위 조회
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, 
RANK() OVER(ORDER BY (SALARY + SALARY * NVL(BONUS, 0)) * 12 DESC) AS "순위"
FROM EMPLOYEE
JOIN JOB USING (JOB_CODE)
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT *
FROM (SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, 
        RANK() OVER(ORDER BY (SALARY + SALARY * NVL(BONUS, 0)) * 12 DESC) AS "순위"
        FROM EMPLOYEE
        JOIN JOB USING (JOB_CODE)
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID))
WHERE 순위 <= 5;

-- 11. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서 명, 부서 별 급여 합계 조회
-- 11-1. JOIN과 HAVING 사용
SELECT DEPT_TITLE, SUM(SALARY)AS "부서 별 급여 합계"
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > (SELECT SUM(SALARY) * 0.2
                        FROM EMPLOYEE);

SELECT SUM(SALARY) * 0.2
FROM EMPLOYEE; -- 전체 급여의 총 합의 20% : 14019248

-- 11-2. 인라인 뷰 사용
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;

SELECT *
FROM (SELECT DEPT_TITLE, SUM(SALARY) AS "부서 별 급여 합"
        FROM EMPLOYEE
        JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
        GROUP BY DEPT_TITLE)
WHERE "부서 별 급여 합" > (SELECT SUM(SALARY) * 0.2
                            FROM EMPLOYEE);

-- 12. 부서 명과 부서 별 급여 합계 조회
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;